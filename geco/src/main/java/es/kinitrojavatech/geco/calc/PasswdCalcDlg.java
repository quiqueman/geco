/*
 * Copyright (C) 2016 Kínitro JavaTech
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.kinitrojavatech.geco.calc;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author quique
 */
public class PasswdCalcDlg extends javax.swing.JDialog {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * A return status code - returned if Cancel button has been pressed
	 */
	public static final int RET_CANCEL = 0;
	/**
	 * A return status code - returned if OK button has been pressed
	 */
	public static final int RET_OK = 1;

	private String generatedPassword;

	/**
	 * Creates new form PasswdCalcDlg
	 */
	@SuppressWarnings("serial")
	public PasswdCalcDlg(final java.awt.Frame parent, final boolean modal, final String url) {
		super(parent, modal);
		initComponents();
		final String site = parseUrl(url);
		jTextFieldSite.setText(site);

		// Close the dialog when Esc is pressed
		final String cancelName = "cancel";
		final InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
		final ActionMap actionMap = getRootPane().getActionMap();
		actionMap.put(cancelName, new AbstractAction() {
			@Override
			public void actionPerformed(final ActionEvent e) {
				doClose(RET_CANCEL);
			}
		});
	}

	/**
	 * @return the return status of this dialog - one of RET_OK or RET_CANCEL
	 */
	public int getReturnStatus() {
		return returnStatus;
	}

	public String getGeneratedPassword() {
		return generatedPassword;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jTextFieldSite = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jPasswordField = new javax.swing.JPasswordField();
		jCheckBoxDisplayPasswd = new javax.swing.JCheckBox();
		jLabel3 = new javax.swing.JLabel();
		jTextFieldGeneratedPasswd = new javax.swing.JTextField();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setTitle("Generador de contraseñas");
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(final java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jLabel1.setText("Site:");

		jLabel2.setText("Password:");

		jPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
			@Override
			public void focusLost(final java.awt.event.FocusEvent evt) {
				jPasswordFieldFocusLost(evt);
			}
		});

		jCheckBoxDisplayPasswd.setText("Mostrar contraseña");
		jCheckBoxDisplayPasswd.setToolTipText("Mostrar la contraseña generada");
		jCheckBoxDisplayPasswd.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jCheckBoxDisplayPasswdStateChanged(evt);
			}
		});

		jLabel3.setText("Contraseña:");

		jTextFieldGeneratedPasswd.setEditable(false);
		jTextFieldGeneratedPasswd.setToolTipText("Contraseña generada");

		okButton.setText("OK");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup().addGap(0, 238, Short.MAX_VALUE)
												.addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67,
														javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(cancelButton))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel2).addComponent(jLabel1))
								.addGap(30, 30, 30)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jPasswordField).addComponent(jTextFieldSite)))
						.addGroup(layout.createSequentialGroup().addComponent(jCheckBoxDisplayPasswd).addGap(0, 0,
								Short.MAX_VALUE))
						.addGroup(layout.createSequentialGroup().addComponent(jLabel3)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jTextFieldGeneratedPasswd)))
						.addContainerGap()));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] { cancelButton, okButton });

		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel1).addComponent(jTextFieldSite,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jLabel2)).addComponent(jPasswordField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jCheckBoxDisplayPasswd)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3).addComponent(jTextFieldGeneratedPasswd,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(cancelButton).addComponent(okButton))
						.addContainerGap()));

		getRootPane().setDefaultButton(okButton);

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void jPasswordFieldFocusLost(final java.awt.event.FocusEvent evt) {// GEN-FIRST:event_jPasswordFieldFocusLost
		final String site = jTextFieldSite.getText();
		final String password = String.valueOf(jPasswordField.getPassword());
		generatedPassword = generatePasswd(site, password);
		final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		final StringSelection data = new StringSelection(generatedPassword);
		clipboard.setContents(data, data);
		if (jCheckBoxDisplayPasswd.isSelected()) {
			jTextFieldGeneratedPasswd.setText(generatedPassword);
		} else {
			jTextFieldGeneratedPasswd.setText("********");
		}
	}// GEN-LAST:event_jPasswordFieldFocusLost

	private void jCheckBoxDisplayPasswdStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jCheckBoxDisplayPasswdStateChanged
		if (jCheckBoxDisplayPasswd.isSelected()) {
			jTextFieldGeneratedPasswd.setText(generatedPassword);
		} else {
			jTextFieldGeneratedPasswd.setText("********");
		}
	}// GEN-LAST:event_jCheckBoxDisplayPasswdStateChanged

	private void okButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		final String site = jTextFieldSite.getText();
		final String password = String.valueOf(jPasswordField.getPassword());
		generatedPassword = generatePasswd(site, password);
		final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		final StringSelection data = new StringSelection(generatedPassword);
		clipboard.setContents(data, data);
		doClose(RET_OK);
	}// GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		doClose(RET_CANCEL);
	}// GEN-LAST:event_cancelButtonActionPerformed

	/**
	 * Closes the dialog
	 */
	private void closeDialog(final java.awt.event.WindowEvent evt) {// GEN-FIRST:event_closeDialog
		doClose(RET_CANCEL);
	}// GEN-LAST:event_closeDialog

	private void doClose(final int retStatus) {
		returnStatus = retStatus;
		setVisible(false);
		dispose();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(final String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (final javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (final ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PasswdCalcDlg.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (final InstantiationException ex) {
			java.util.logging.Logger.getLogger(PasswdCalcDlg.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (final IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PasswdCalcDlg.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (final javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PasswdCalcDlg.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				final PasswdCalcDlg dialog = new PasswdCalcDlg(new javax.swing.JFrame(), true, "");
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(final java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

	public String generatePasswd(final String site, final String password) {
		int counter = 0;
		StringBuilder newPassword = new StringBuilder();
		for (int i = 0; i < 7; i++) {
			int c1 = 0;
			if (i < password.length()) {
				c1 = password.charAt(i);
			}
			int c2 = 0;
			if (i < site.length()) {
				c2 = site.charAt(i);
			}
			if (c1 > c2) {
				newPassword.append((char) c1);
				counter++;
			} else if (c1 < c2) {
				final char c = (char) (c2 - 32);
				newPassword.append(c);
			} else {
				newPassword.append(i);
			}
		}
		newPassword = newPassword.append(counter);
		return newPassword.toString();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JCheckBox jCheckBoxDisplayPasswd;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JPasswordField jPasswordField;
	private javax.swing.JTextField jTextFieldGeneratedPasswd;
	private javax.swing.JTextField jTextFieldSite;
	private javax.swing.JButton okButton;
	// End of variables declaration//GEN-END:variables

	private int returnStatus = RET_CANCEL;

	static String parseUrl(final String url) {
		if ((url != null) && !"".equals(url)) {
			String result = url.toLowerCase();
			result = removeProtocol(result);
			result = getDomain(result);

			return result;
		} else {
			return "";
		}
	}

	private static String getDomain(final String url) {
		final String[] parts = url.split("\\.");
		if (parts.length > 1) {
			return parts[parts.length - 2];
		} else {
			return parts[0];
		}
	}

	private static String removeProtocol(final String url) {
		final int i = url.indexOf("://");
		if (i > -1) {
			return url.substring(i + 3);
		} else {
			return url;
		}
	}

}
