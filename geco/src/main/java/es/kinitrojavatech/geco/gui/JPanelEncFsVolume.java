/*
 * Copyright (C) 2016 Kínitro JavaTech
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.kinitrojavatech.geco.gui;

import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import es.kinitrojavatech.geco.xml.EncryptedVolumes;
import es.kinitrojavatech.geco.xml.Volume;

/**
 *
 * @author quique
 */
public class JPanelEncFsVolume extends javax.swing.JPanel {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private final EncryptedVolumes collection;
	private Volume volume;
	private final JPanelEncFsCollection container;

	/**
	 * Creates new form JPanelEncFsItem
	 *
	 * @param jPanelEncFsCollection
	 */
	public JPanelEncFsVolume(final JPanelEncFsCollection jPanelEncFsCollection, final EncryptedVolumes collection,
			final Volume volume) {
		initComponents();
		this.collection = collection;
		this.volume = volume;
		container = jPanelEncFsCollection;
		jTextFieldDescription.setText(volume.getDescription());
		jTextFieldMountPoint.setText(volume.getMountPoint());
		jTextFieldName.setText(volume.getName());
		jTextFieldPath.setText(volume.getPath());
		jPasswordField.setText(volume.getPassword());
		if (isNewFs()) {
			jButtonUpdate.setText("Añadir");
			jTextFieldName.setVisible(false);
			jLabelName.setVisible(false);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabelName = new javax.swing.JLabel();
		jTextFieldName = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jTextFieldPath = new javax.swing.JTextField();
		jButtonBrowsePath = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jTextFieldDescription = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		jPasswordField = new javax.swing.JPasswordField();
		jCheckBoxSwhoPassword = new javax.swing.JCheckBox();
		jLabel5 = new javax.swing.JLabel();
		jTextFieldMountPoint = new javax.swing.JTextField();
		jButtonBrowseMountPoint = new javax.swing.JButton();
		jButtonUpdate = new javax.swing.JButton();
		jButtonMount = new javax.swing.JButton();
		jButtonDelete = new javax.swing.JButton();

		jLabelName.setText("Nombre:");

		jLabel2.setText("Ruta:");
		jLabel2.setToolTipText("Ruta a la carpeta encriptada");

		jButtonBrowsePath.setText("...");
		jButtonBrowsePath.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonBrowsePathActionPerformed(evt);
			}
		});

		jLabel3.setText("Descripción:");

		jLabel4.setText("Password:");

		jCheckBoxSwhoPassword.setText("Mostrar contraseña");
		jCheckBoxSwhoPassword.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(final javax.swing.event.ChangeEvent evt) {
				jCheckBoxSwhoPasswordStateChanged(evt);
			}
		});

		jLabel5.setText("Punto de montaje:");

		jButtonBrowseMountPoint.setText("...");
		jButtonBrowseMountPoint.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonBrowseMountPointActionPerformed(evt);
			}
		});

		jButtonUpdate.setIcon(
				new javax.swing.ImageIcon(getClass().getResource("/es/kinitrojavatech/geco/gui/icons/gtk-edit.png"))); // NOI18N
		jButtonUpdate.setText("Actualizar");
		jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonUpdateActionPerformed(evt);
			}
		});

		jButtonMount.setIcon(new javax.swing.ImageIcon(
				getClass().getResource("/es/kinitrojavatech/geco/gui/icons/system-file-manager.png"))); // NOI18N
		jButtonMount.setText("Montar FS");
		jButtonMount.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				jButtonMountActionPerformed(evt);
			}
		});

		jButtonDelete.setIcon(new javax.swing.ImageIcon(
				getClass().getResource("/es/kinitrojavatech/geco/gui/icons/edit-delete.png"))); // NOI18N
		jButtonDelete.setText("Borrar");

		final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabelName).addComponent(jLabel2))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jTextFieldName)
												.addGroup(layout.createSequentialGroup().addComponent(jTextFieldPath)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(jButtonBrowsePath))))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel3).addComponent(jLabel4))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(jPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 347,
														Short.MAX_VALUE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(jCheckBoxSwhoPassword))
										.addComponent(jTextFieldDescription)))
								.addGroup(layout.createSequentialGroup().addComponent(jLabel5)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jTextFieldMountPoint)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jButtonBrowseMountPoint))
						.addGroup(layout.createSequentialGroup().addComponent(jButtonDelete)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButtonUpdate)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jButtonMount)))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jLabelName).addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2)
						.addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jButtonBrowsePath))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel3)
						.addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel4)
						.addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jCheckBoxSwhoPassword))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel5)
						.addComponent(jTextFieldMountPoint, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jButtonBrowseMountPoint))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jButtonUpdate).addComponent(jButtonMount).addComponent(jButtonDelete))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void jCheckBoxSwhoPasswordStateChanged(final javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jCheckBoxSwhoPasswordStateChanged
		if (jCheckBoxSwhoPassword.isSelected()) {
			jPasswordField.setEchoChar((char) 0);
		} else {
			jPasswordField.setEchoChar('*');
		}
	}// GEN-LAST:event_jCheckBoxSwhoPasswordStateChanged

	private void jButtonBrowseMountPointActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonBrowseMountPointActionPerformed
		final File folder = chooseFolder("Punto de montaje");
		if (folder != null) {
			jTextFieldMountPoint.setText(folder.getAbsolutePath());
		}
	}// GEN-LAST:event_jButtonBrowseMountPointActionPerformed

	private void jButtonMountActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonMountActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jButtonMountActionPerformed

	private void jButtonBrowsePathActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonBrowsePathActionPerformed
		final File folder = chooseFolder("Carpeta compartida");
		if (folder != null) {
			jTextFieldPath.setText(folder.getAbsolutePath());
		}
	}// GEN-LAST:event_jButtonBrowsePathActionPerformed

	private File chooseFolder(final String choosertitle) {
		final JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setDialogTitle(choosertitle);
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setAcceptAllFileFilterUsed(false);
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			return chooser.getSelectedFile();
		}
		return null;
	}

	private void jButtonUpdateActionPerformed(final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonUpdateActionPerformed
		copyGuiData();
		if (isNewFs()) {
			final String name = JOptionPane.showInputDialog(this, "Nombre del nuevo volumen", "Nuevo Volumen",
					JOptionPane.INFORMATION_MESSAGE);
			if (name != null) {
				volume.setName(name);
				collection.getVolume().add(volume);
				container.addVolume(volume);
				reset();
			}
		} else {
			volume.setName(jTextFieldName.getText());
		}
	}// GEN-LAST:event_jButtonUpdateActionPerformed

	private void reset() {
		jTextFieldDescription.setText("");
		jTextFieldMountPoint.setText("");
		jPasswordField.setText("");
		jTextFieldPath.setText("");
		jTextFieldName.setText("");
		volume = new Volume();
	}

	private boolean isNewFs() {
		return (volume.getName() == null);
	}

	private void copyGuiData() {
		volume.setDescription(jTextFieldDescription.getText());
		volume.setMountPoint(jTextFieldMountPoint.getText());
		volume.setPassword(String.valueOf(jPasswordField.getPassword()));
		volume.setPath(jTextFieldPath.getText());
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonBrowseMountPoint;
	private javax.swing.JButton jButtonBrowsePath;
	private javax.swing.JButton jButtonDelete;
	private javax.swing.JButton jButtonMount;
	private javax.swing.JButton jButtonUpdate;
	private javax.swing.JCheckBox jCheckBoxSwhoPassword;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabelName;
	private javax.swing.JPasswordField jPasswordField;
	private javax.swing.JTextField jTextFieldDescription;
	private javax.swing.JTextField jTextFieldMountPoint;
	private javax.swing.JTextField jTextFieldName;
	private javax.swing.JTextField jTextFieldPath;
	// End of variables declaration//GEN-END:variables
}
